Write a Java program to find the first non-repeating character in a given string.
import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String s=sc.nextLine();
        s=s.toLowerCase();
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            int count=0;
            for(int j=0;j<s.length();j++){
                if(c==s.charAt(j)){
                    count++;
                }
            }
            if(count==1){
                System.out.println(c);
                break;
            }
        }
    }
}

Write a Java function to check whether a given string is a palindrome (reads the same forward and backward). 
Ignore case and non-alphabetic characters.

import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String s=sc.nextLine();
        String s1="";
        String s2="";
        for (int i=0;i<s.length();i++) {
            char c=s.charAt(i);
            if (Character.isLetterOrDigit(c)) {
                s1 += String.valueOf(c).toLowerCase(); 
            }
        }
        for (int i=(s.length()-1);i>=0;i--) {
            char c=s.charAt(i);
            if (Character.isLetterOrDigit(c)) {
                s2 += String.valueOf(c).toLowerCase(); 
            }
        }

        if(s1.equals(s2)){
            System.out.println("Palindrome");
        }
        else{
          System.out.println("Not a Palindrome");  
        }
    }
}


Write a function that checks whether two given strings are anagrams (i.e., if they contain the same characters in 
the same quantities but possibly in a different order).
import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
       String s1=sc.next();
       String s2=sc.next();
       if(s1.length()==s2.length()){
           char[] c1=s1.toCharArray();
           Arrays.sort(c1);
           char[] c2=s2.toCharArray();
           Arrays.sort(c2);
           if (Arrays.equals(c1,c2)){
               System.out.println("Anagram");
           }
           else{
              System.out.println("Not an Anagram"); 
           }
       }
    }
}


Implement a method to perform basic string compression using the counts of repeated characters. 
If the compressed string is not smaller than the original, return the original string.
import java.util.*;

class HelloWorld {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s1 = sc.next();
        String s = "";

        for (int i = 0; i < s1.length(); i++) {
            int count = 1;
            while (i + 1 < s1.length() && s1.charAt(i) == s1.charAt(i + 1)) {
                count++;
                i++;
            }
            s += s1.charAt(i) + String.valueOf(count);
        }
        if(s.length()<=s1.length()){
            System.out.println(s);
        }
        else{
           System.out.println(s1); 
        }
    }
}

Longest Substring Without Repeating Characters
Given a string, find the length of the longest substring without repeating characters.
Given a string, find the length of the longest substring without repeating characters.
class LongestSubstring {
    public static void main(String[] args) {
        String s = "abcabcbb"; 
        int maxLength = findLongestSubstring(s);
        System.out.println(maxLength);
    }

    public static int findLongestSubstring(String s) {
        int maxLength = 0; 

        for (int i = 0; i < s.length(); i++) {
            boolean[] visited = new boolean[256]; 
            int currentLength = 0; 

            for (int j = i; j < s.length(); j++) {
                char currentChar = s.charAt(j);
                
                if (visited[currentChar]) {
                    break;
                }
                
                visited[currentChar] = true;
                currentLength++;
            }
            
            maxLength = Math.max(maxLength, currentLength);
        }

        return maxLength;
    }
}
}


